plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group

String targetVersion = project.properties["mod_version"] == null || project.properties["mod_version"].toString().length() == 0
        ? "-indev"
        :"-v" + project.properties["mod_version"].toString()
project.setVersion(project.properties["minecraft_version"] + targetVersion)

loom {
    accessWidenerPath = file("src/main/resources/grapplemod.accesswidener")
}

repositories {

    // Mappings
    maven {
        name = 'ParchmentMC'
        url = "https://maven.parchmentmc.org/"
    }

    // Mod Deps
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
//    mappings loom.layered() {
//        officialMojangMappings()
//
//        if(project.parchment_version != "")
//            parchment("org.parchmentmc.data:${project.parchment_version}@zip")
//    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    // Trying to update to 1.19.4-rc3 was problematic because the mappings had
    // a slightly different version to the dependency (rc3 vs rc.3)

    // This just adds a workaround so the dependency version can be ignored when
    // developing for a snapshot.
    HashMap modifiedSrc = new HashMap<>(project.properties)
    modifiedSrc.put("snapshot_version_workaround",
            project.properties["fix_it_not_launching_for_snapshots"] == "yes"
            ? "*"
            : project.properties["minecraft_version"]
    )

    filesMatching("fabric.mod.json") {
        expand modifiedSrc
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.archives_base_name

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

assemble {
    version += "-${project.minecraft_version}-release"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
